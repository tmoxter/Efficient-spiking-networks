# -*- coding: utf-8 -*-
"""srnn_SHD_LIF.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F1hAwIesDLCs6_tP89mETiDl6mQJ8bnz
"""

p%pylab inline

from google.colab import drive
drive.mount('/content/gdrive')

!unzip gdrive/My\ Drive/NDDL/SHD/data.zip

import torch
import torch.nn as nn
import torchvision.transforms as transforms
import torchvision.datasets as dsets
import torch.nn.functional as F
import numpy as np
from torch.autograd import Variable
from torch.optim.lr_scheduler import StepLR
import matplotlib.pyplot as plt
import math
import matplotlib
from torch.utils import data

torch.manual_seed(0)

train_x = np.load('data/trainX_4ms.npy', mmap_mode = 'r')
train_y = np.load('data/trainY_4ms.npy').astype(np.float)

test_x = np.load('data/testX_4ms.npy', mmap_mode = 'r')
test_y = np.load('data/testY_4ms.npy').astype(np.float)

print('dataset shape: ', train_x.shape)
print('dataset shape: ', test_x.shape)

train_class = [1, 5, 7, 10]
train_index = []
test_index = []
for i in train_class: 
  train_index = np.append(train_index, np.asarray(np.where(train_y==i), dtype = int).flatten())
  test_index = np.append(test_index, np.asarray(np.where(test_y==i), dtype = int).flatten())

train_index = np.random.permutation(np.array(train_index).astype(int))
test_index = np.random.permutation(np.array(test_index).astype(int))

len(train_index)

train_x = train_x[train_index]
train_y = train_y[train_index]
test_x = test_x[test_index]
test_y = test_y[test_index]

test_y

batch_size = 100

# tensor_trainX = torch.tensor(train_X[train_indices])  # transform to torch tensor
# tensor_trainY = torch.tensor(train_y[train_indices])
# # train_dataset = data.TensorDataset(tensor_trainX, tensor_trainY)
# # train_loader = data.DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
# tensor_testX = torch.tensor(test_X[test_indices])  # transform to torch tensor
# tensor_testY = torch.tensor(test_y[test_indices])
# # test_dataset = data.TensorDataset(tensor_testX, tensor_testY)
# test_loader = data.DataLoader(test_dataset, batch_size=batch_size, shuffle=False)

# idx_not_11 = np.where(test_y<11)[0]
# test_x = test_x[idx_not_11,:,:,:]
# test_y = test_y[idx_not_11]

_,seq_length,dim_channel = train_x.shape
print('input dataset shap: ',train_x.shape)
print('output dataset shap: ',train_y.shape)

cat_count = np.zeros(20)
for i in range(len(test_y)):
  cat_count[int(test_y[i])]+=1
cat_count

tensor_trainX = torch.Tensor(train_x)  # transform to torch tensor
tensor_trainY = torch.Tensor(train_y)
train_dataset = data.TensorDataset(tensor_trainX, tensor_trainY)
train_loader = data.DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
tensor_testX = torch.Tensor(test_x)  # transform to torch tensor
tensor_testY = torch.Tensor(test_y)
test_dataset = data.TensorDataset(tensor_testX, tensor_testY)
test_loader = data.DataLoader(test_dataset, batch_size=batch_size, shuffle=False)

'''
STEP 2: MAKING DATASET ITERABLE
'''

decay = 0.1  # neuron decay rate
thresh = 0.5  # neuronal threshold
lens = 0.5  # hyper-parameters of approximate function
num_epochs = 20  # 150  # n_iters / (len(train_dataset) / batch_size)
num_epochs = int(num_epochs)

'''
STEP 3a: CREATE spike MODEL CLASS
'''

b_j0 = 0.01  # neural threshold baseline
R_m = 1  # membrane resistance
dt = 1  #
gamma = .5  # gradient scale


def gaussian(x, mu=0., sigma=.5):
    return torch.exp(-((x - mu) ** 2) / (2 * sigma ** 2)) / torch.sqrt(2 * torch.tensor(math.pi)) / sigma


# define approximate firing function

class ActFun_adp(torch.autograd.Function):
    @staticmethod
    def forward(ctx, input):  # input = membrane potential- threshold
        ctx.save_for_backward(input)
        return input.gt(0).float()  # is firing ???

    @staticmethod
    def backward(ctx, grad_output):  # approximate the gradients
        input, = ctx.saved_tensors
        grad_input = grad_output.clone()
        # temp = abs(input) < lens
        scale = 6.0
        hight = .15
        # temp = torch.exp(-(input**2)/(2*lens**2))/torch.sqrt(2*torch.tensor(math.pi))/lens
        temp = gaussian(input, mu=0., sigma=lens) * (1. + hight) \
               - gaussian(input, mu=lens, sigma=scale * lens) * hight \
               - gaussian(input, mu=-lens, sigma=scale * lens) * hight
        # temp = gaussian(input, mu=0., sigma=lens) * (1. + hight) \
        #        - gaussian(input, mu=lens, sigma=scale * lens) * hight *(input).gt(0).float()\
        #        - gaussian(input, mu=-lens, sigma=scale * lens) * hight*(input).gt(0).float()
        
        # temp = gaussian(input, mu=0., sigma=lens) * (1. + hight) \
        #     - gaussian(input, mu=lens, sigma=scale * lens) * hight *(input).lt(0).float()\
        #     - gaussian(input, mu=-lens, sigma=scale * lens) * hight*(input).lt(0).float()

        return grad_input * temp.float() * gamma

act_fun_adp = ActFun_adp.apply

# tau_m = torch.FloatTensor([tau_m])

def mem_update_adp(inputs, mem, spike, tau_adp, b, tau_m, dt=1, isAdapt=1):
    alpha = torch.exp(-1. * dt / tau_m).cuda()
    ro = torch.exp(-1. * dt / tau_adp).cuda()
    if isAdapt:
        beta = 1.8
    else:
        beta = 0.

    b = ro * b + (1 - ro) * spike
    B = b_j0 + beta * b

    mem = mem * alpha + (1 - alpha) * R_m * inputs - B * spike * dt
    inputs_ = mem - B
    spike = act_fun_adp(inputs_)  # act_fun : approximation firing function
    return mem, spike, B, b


def output_Neuron(inputs, mem, tau_m, dt=1):
    """
    The read out neuron is leaky integrator without spike
    """
    # alpha = torch.exp(-1. * dt / torch.FloatTensor([30.])).cuda()
    alpha = torch.exp(-1. * dt / tau_m).cuda()
    mem = mem * alpha + (1. - alpha) * R_m * inputs
    return mem

class RNN_custom(nn.Module):
    def __init__(self, input_size, hidden_size, output_size):
        super(RNN_custom, self).__init__()

        self.hidden_size = hidden_size
        # self.hidden_size = input_size
        self.i_2_h1 = nn.Linear(input_size, hidden_size[0])
        self.h1_2_h1 = nn.Linear(hidden_size[0], hidden_size[0])
        self.h1_2_h2 = nn.Linear(hidden_size[0], hidden_size[1])
        self.h2_2_h2 = nn.Linear(hidden_size[1], hidden_size[1])

        self.h2o = nn.Linear(hidden_size[1], output_size)

        self.tau_adp_h1 = nn.Parameter(torch.Tensor(hidden_size[0]))
        self.tau_adp_h2 = nn.Parameter(torch.Tensor(hidden_size[1]))
        self.tau_adp_o = nn.Parameter(torch.Tensor(output_size))
        self.tau_m_h1 = nn.Parameter(torch.Tensor(hidden_size[0]))
        self.tau_m_h2 = nn.Parameter(torch.Tensor(hidden_size[1]))
        self.tau_m_o = nn.Parameter(torch.Tensor(output_size))

        nn.init.orthogonal_(self.h1_2_h1.weight)
        nn.init.orthogonal_(self.h2_2_h2.weight)
        nn.init.xavier_uniform_(self.i_2_h1.weight)
        nn.init.xavier_uniform_(self.h1_2_h2.weight)
        nn.init.xavier_uniform_(self.h2_2_h2.weight)
        nn.init.xavier_uniform_(self.h2o.weight)

        nn.init.constant_(self.i_2_h1.bias, 0)
        nn.init.constant_(self.h1_2_h2.bias, 0)
        nn.init.constant_(self.h2_2_h2.bias, 0)
        nn.init.constant_(self.h1_2_h1.bias, 0)



        nn.init.normal_(self.tau_adp_h1,150,10)
        nn.init.normal_(self.tau_adp_h2, 150,10)
        nn.init.normal_(self.tau_adp_o, 150,10)
        nn.init.normal_(self.tau_m_h1, 20.,5)
        nn.init.normal_(self.tau_m_h2, 20.,5)
        nn.init.normal_(self.tau_m_o, 20.,5)

        self.b_h1 = self.b_h2 = self.b_o = 0

    def forward(self, input):
        batch_size, seq_num, input_dim = input.shape
        self.b_h1 = self.b_h2 = self.b_o = b_j0

        mem_layer1 = spike_layer1 = torch.rand(batch_size, self.hidden_size[0]).cuda()
        mem_layer2 = spike_layer2 = torch.rand(batch_size, self.hidden_size[1]).cuda()
        mem_output = torch.rand(batch_size, output_dim).cuda()
        output = torch.zeros(batch_size, output_dim).cuda()

        hidden_spike_ = []
        hidden_mem_ = []
        h2o_mem_ = []

        for i in range(seq_num):
            input_x = input[:, i, :]

            h_input = self.i_2_h1(input_x.float()) + self.h1_2_h1(spike_layer1)
            mem_layer1, spike_layer1, theta_h1, self.b_h1 = mem_update_adp(h_input, mem_layer1, spike_layer1,
                                                                         self.tau_adp_h1, self.b_h1,self.tau_m_h1)
            h2_input = self.h1_2_h2(spike_layer1) + self.h2_2_h2(spike_layer2)
            mem_layer2, spike_layer2, theta_h2, self.b_h2 = mem_update_adp(h2_input, mem_layer2, spike_layer2,
                                                                         self.tau_adp_h2, self.b_h2, self.tau_m_h2)
            mem_output = output_Neuron(self.h2o(spike_layer2), mem_output, self.tau_m_o)
            if i > 10:
                output= output + F.softmax(mem_output, dim=1)#F.softmax(mem_output, dim=1)#

            # hidden_spike_.append(spike_layer1.data.cpu().numpy())
            hidden_spike_.append((spike_layer1.data.cpu().numpy().mean()+spike_layer2.data.cpu().numpy().mean())/2.)
            hidden_mem_.append(mem_layer1.data.cpu().numpy())
            h2o_mem_.append(mem_output.data.cpu().numpy())

        return output, hidden_spike_, hidden_mem_, h2o_mem_

'''
STEP 4: INSTANTIATE MODEL CLASS
'''
input_dim = 700
hidden_dim = [128,128]  # 128
output_dim = 20
seq_dim = 250  # Number of steps to unroll
num_encode = 700
total_steps = seq_dim

print('Model: Input:', input_dim, 'Output: ', output_dim, 'Hidden:', hidden_dim)

model = RNN_custom(input_dim, hidden_dim, output_dim)

tau_m_1_s = model.tau_m_h1.detach().cpu().numpy()
tau_adp_1_s = model.tau_adp_h1.detach().cpu().numpy()

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
print("device:", device)
model.to(device)
criterion = nn.CrossEntropyLoss()
learning_rate =1e-2  # 1e-2

# optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)
base_params = [model.i_2_h1.weight, model.i_2_h1.bias,
               model.h1_2_h1.weight, model.h1_2_h1.bias,
               model.h1_2_h2.weight, model.h1_2_h2.bias,
               model.h2_2_h2.weight, model.h2_2_h2.bias,
               model.h2o.weight, model.h2o.bias]
optimizer = torch.optim.Adam([
    {'params': base_params},
    {'params': model.tau_adp_h1, 'lr': learning_rate * 5},
    {'params': model.tau_adp_h2, 'lr': learning_rate * 5},
    {'params': model.tau_adp_o, 'lr': learning_rate * 5},
    {'params': model.tau_m_h1, 'lr': learning_rate * 2},
    {'params': model.tau_m_h2, 'lr': learning_rate * 2},
    {'params': model.tau_m_o, 'lr': learning_rate * 2}],
    lr=learning_rate,eps=1e-5)
scheduler = StepLR(optimizer, step_size=10, gamma=.5)

def train(model, num_epochs=150):
    acc = []
    best_accuracy = 80
    for epoch in range(num_epochs):
        for i, (images, labels) in enumerate(train_loader):
            images = images.view(-1, seq_dim, input_dim).requires_grad_().to(device)
            labels = labels.long().to(device)
            # print(labels.shape)
            # Clear gradients w.r.t. parameters
            optimizer.zero_grad()
            # Forward pass to get output/logits
            outputs, _,_,_ = model(images)
            # Calculate Loss: softmax --> cross entropy loss
            loss = criterion(outputs, labels)
            # Getting gradients w.r.t. parameters
            loss.backward()
            # Updating parameters
            optimizer.step()
        scheduler.step()
        accuracy = test(model, train_loader)
        ts_acc = test(model,is_test=1)
        if ts_acc > best_accuracy and accuracy > 80:
            # torch.save(model, './model/model_' + str(ts_acc) + '-readout-2layer-v1-12Feb[128,128].pth')
            best_accuracy = ts_acc
        acc.append(accuracy)
        print('epoch: ', epoch, '. Loss: ', loss.item(), '. Tr Accuracy: ', accuracy, '. Ts Accuracy: ', ts_acc)
    return acc

# def test(model, dataloader=test_loader):
#     correct = 0
#     total = 0
#     # Iterate through test dataset
#     for images, labels in dataloader:
#         images = images.view(-1, seq_dim, input_dim).to(device)

#         outputs, _,_,_ = model(images)
#         _, predicted = torch.max(outputs.data, 1)
#         total += labels.size(0)
#         if torch.cuda.is_available():
#             correct += (predicted.cpu() == labels.long().cpu()).sum()
#         else:
#             correct += (predicted == labels).sum()

#     accuracy = 100. * correct.numpy() / total
#     return accuracy

def test(model, dataloader=test_loader,is_test=0):
    correct = 0
    total = 0
    # Iterate through test dataset
    for images, labels in dataloader:
        images = images.view(-1, seq_dim, input_dim).to(device)

        outputs, fr_,_,_ = model(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        if torch.cuda.is_available():
            correct += (predicted.cpu() == labels.long().cpu()).sum()
        else:
            correct += (predicted == labels).sum()

    accuracy = 100. * correct.numpy() / total
    if is_test:
        print('Mean FR: ', np.array(fr_).mean())
    return accuracy
    
def predict(model):
    # Iterate through test dataset
    result = np.zeros(1)
    for images, labels in test_loader:
        images = images.view(-1, seq_dim, input_dim).to(device)

        outputs, _,_,_ = model(images)
        # _, Predicted = torch.max(outputs.data, 1)
        # result.append(Predicted.data.cpu().numpy())
        predicted_vec = outputs.data.cpu().numpy()
        Predicted = predicted_vec.argmax(axis=1)
        result = np.append(result,Predicted)
    return np.array(result[1:]).flatten()

###############################
acc = train(model, num_epochs)
accuracy = test(model)
print(' Accuracy: ', accuracy)

###################
##  Accuracy  curve
###################
if num_epochs > 10:
    plt.plot(acc)
    plt.title('Learning Curve -- Accuracy')
    plt.xlabel('Epoch')
    plt.ylabel('Accuracy: %')
    plt.show()

from sklearn.metrics import confusion_matrix

predicted = predict(model)
print(predicted.shape, test_y.shape)
cm = confusion_matrix(test_y, predicted)
print('max output acc:', np.sum(test_y == predicted) / len(test_y))
# print(cm)
plt.imshow(cm)
plt.show()

# classification report results
from sklearn import metrics

print("classification report :", metrics.classification_report(test_y, predicted))
# example
images = tensor_trainX[1, :, :]
images = images.view(-1, seq_dim, input_dim).to(device)


outputs, _,_,output_mem = model(images)
output_mem = np.array(output_mem).reshape(250, 20)

for i in range(20):
    plt.plot(output_mem[:, i], label=str(i))
plt.legend()
plt.show()